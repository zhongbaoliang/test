package leetcode.editor.cn.JZ105;

import java.util.*;
//广度优先
class Solution2 {
    int[][] next = new int[][]{{0,-1},{0,1},{-1,0},{1,0}};
    int max=0;
    public int maxAreaOfIsland(int[][] grid) {
        int idx=2;
        int height = grid.length,width=grid[0].length;
        for(int i=0;i<height;i++){
            for(int j=0;j<width;j++){
                if(grid[i][j]==1){
                    Queue<int[]> queue = new LinkedList<>();
                    queue.offer(new int[]{i,j});
                    int maxi=0;
                    while(!queue.isEmpty()){

                        int[] cur = queue.poll();
                        if(grid[cur[0]][cur[1]] == 1){
                            maxi++;
                            grid[cur[0]][cur[1]] = idx;
                            for (int k = 0; k < 4; k++) {
                                int nextX = cur[0] + next[k][0], nextY = cur[1] + next[k][1];
                                if (nextX >= 0 && nextX < height && nextY >= 0 && nextY < width && grid[nextX][nextY] == 1) {
                                    queue.offer(new int[]{nextX, nextY});
                                }
                            }
                        }
                    }
                    max=maxi>max?maxi:max;
                }
                idx++;
            }
        }
        return max;
    }

    public static void main(String[] args) {
        int[][] arr = new int[][]{
                /*{0,0,1,0,0,0,0,1,0,0,0,0,0},
                {0,0,0,0,0,0,0,1,1,1,0,0,0},
                {0,1,1,0,1,0,0,0,0,0,1,0,0},
                {0,1,0,0,1,1,0,0,0,0,1,0,1},
                {0,1,0,0,1,1,0,0,1,1,1,1,1},
                {0,0,0,0,0,0,0,0,0,1,1,0,0},
                {0,0,0,0,0,0,0,1,1,1,0,0,0},
                {0,0,0,0,0,0,0,1,1,0,0,0,0}*/

                /*{0,1},
                {1,1},
                {1,0}*/

                {1,1,0,0,0},
                {1,1,0,0,0},
                {0,0,0,1,1},
                {0,0,0,1,1}

/*
                {0,0,0,0,0,0,0,0,1,0,0},
                {0,0,0,0,0,1,1,1,1,0,0},
                {0,0,0,0,0,0,1,1,1,0,0},
                {0,0,0,0,1,1,0,0,1,1,1},
                {1,0,1,1,1,1,1,0,1,1,0},
                {1,1,1,0,1,1,1,1,1,0,0},
                {1,0,0,0,0,0,1,0,0,0,0},
                {1,1,0,0,0,0,1,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0}*/
                //        10                  20                  30                  40                   50
                /*{0,0,0,0,1,0,1,1,0,0,1,0,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,1,1,1,1,1,1,0,1,1},
                {0,1,0,0,0,0,1,1,1,0,1,1,0,0,0,1,0,1,1,1,0,0,1,0,1,0,0,1,0,0,0,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1},
                {1,0,0,0,0,0,0,1,1,1,1,0,1,1,0,0,0,0,1,0,0,1,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,1,1},
                {0,0,0,0,1,1,1,0,1,1,0,1,0,0,0,0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,1,0,1,1,1,1,0,1,1,0,0,0,1,1},
                {0,0,0,0,1,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,0,0,0,1,0,1,1,1,1,1,0,1,1,0,1,1,0,1,0,0,0,0,0,1,0,0,1},//5
                {0,0,1,1,1,0,1,0,0,0,1,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,1,1,1,0,1,1,1,1,1,0,1,0,1,1,1,1,0,0,0,0,0,1,0,1},
                {0,1,0,1,0,0,1,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,1,0,0,0,0,1,1,0,1,1,0},
                {0,1,0,0,1,1,1,1,0,1,1,0,1,0,1,0,0,0,1,0,0,0,0,0,1,0,1,1,0,1,0,0,1,0,1,1,1,0,1,0,0,1,1,1,0,0,1,0,1,0},
                {0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,1,1,0,1,0,0,1,0,0}*/

        };
        System.out.println(new Solution2().maxAreaOfIsland(arr));
    }
}